// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.29.2
// source: api/v1/lobby/game_lobby_service.proto

package lobby

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLobbyHello = "/api.v1.lobby.Lobby/Hello"

type LobbyHTTPServer interface {
	Hello(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

func RegisterLobbyHTTPServer(s *http.Server, srv LobbyHTTPServer) {
	r := s.Route("/")
	r.GET("/game/v1/lobby/hello", _Lobby_Hello0_HTTP_Handler(srv))
}

func _Lobby_Hello0_HTTP_Handler(srv LobbyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLobbyHello)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.Hello(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type LobbyHTTPClient interface {
	Hello(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type LobbyHTTPClientImpl struct {
	cc *http.Client
}

func NewLobbyHTTPClient(client *http.Client) LobbyHTTPClient {
	return &LobbyHTTPClientImpl{client}
}

func (c *LobbyHTTPClientImpl) Hello(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/game/v1/lobby/hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLobbyHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
